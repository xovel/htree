#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');

const psargv = require('psargv');

const htree = require('../');
const pkg = require('../package.json');

function core(argv, callback) {
  const options = psargv(argv, {
    number: true,
    alias: {
      h: 'help',
      v: 'version',
      o: 'output',
      s: 'showDir',
      f: 'folder',
      d: 'dir',
      i: 'ignore',
      m: 'maxDepth',
      a: 'ascii'
    }
  });

  if (options.version) {
    return version();
  }

  if (options.help) {
    return help();
  }

  if (options.dir || options._[0]) {
    options.dir = options.dir || options._[0];
  }
  if (options.ignore) {
    options.ignore = options.ignore.split(',');
  }
  if (options.exclude) {
    options.exclude = new RegExp(options.exclude, 'i');
  } else if (options.exclude === false) {
    options.exclude = '';
  }

  if (options.dir) {
    if (options.dir.indexOf(':') === -1 && options.dir[0] !== '/') {
      options.dir = path.join(process.cwd(), options.dir);
    }
    if (!fs.existsSync(options.dir)) {
      process.stdout.write(`No such file or directory: ${options.dir}\n`);
      return;
    }
  }

  const ret = htree(options);

  let output = options.o || options.output;

  if (output) {
    if (output.indexOf(':') === -1 || output[0] !== '/') {
      output = path.join(process.cwd(), output);
    }
    if (!options.force && fs.existsSync(output)) {
      process.stdout.write(`Warning: file ${output} already exist, use \`--force\` to overwrite it.\n`);
      return;
    }
    fs.writeFile(output, ret, callback);
  } else {
    process.stdout.write(ret + '\n');
    return callback();
  }

}

function help() {
  let helpFilePath = path.join(__dirname, 'help.txt');
  let text = fs.readFileSync(helpFilePath, 'utf-8');
  process.stdout.write(text + '\n');
}

function version() {
  process.stdout.write(pkg.version + '\n');
}

if (!module.parent) {
  process.title = pkg.name;
  core(process.argv.slice(2), (err, code) => {
    if (err) {
      throw err;
    }
    return process.exit(code || 0);
  });
} else {
  module.exports = core;
}
